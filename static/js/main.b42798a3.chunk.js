(this["webpackJsonpaxon-generator-toolbox"]=this["webpackJsonpaxon-generator-toolbox"]||[]).push([[0],{102:function(e,t){},121:function(e,t,i){"use strict";i.r(t);var o={};i.r(o),i.d(o,"randomPosition",(function(){return W})),i.d(o,"randomDirection",(function(){return B})),i.d(o,"addMatrix3",(function(){return G})),i.d(o,"mat3ToMat4",(function(){return q})),i.d(o,"outerProduct",(function(){return X})),i.d(o,"projectOntoCube",(function(){return Z})),i.d(o,"collisionAxis",(function(){return $})),i.d(o,"deform",(function(){return K})),i.d(o,"extremum",(function(){return Q})),i.d(o,"shuffle",(function(){return ee})),i.d(o,"randomHexColor",(function(){return te})),i.d(o,"hexColorToVector",(function(){return ie})),i.d(o,"applyColor",(function(){return oe})),i.d(o,"scaledValueToColor",(function(){return ne})),i.d(o,"valueToColor",(function(){return ae}));var n=i(0),a=i.n(n),r=i(12),s=i.n(r),l=i(177),c=i(29),m=i(14),d=i(181),p=i(162),h=i(175),x=i(122),u=i(176),b=i(156),j=i(159),f=i(161),g=i(184),O=i(166),w=i(167),y=i(168),v=i(169),D=i(170),S=i(171),E=i(172),M=i(165),A=i(186),C=i(178),T=i(173),k=i(174),N=i(182),z=i(8),F=i(71),I=i(1),P=e=>{let{colors:t,startTitle:i,midTitle:o,endTitle:n,height:a,width:r}=e;return Object(I.jsxs)("div",{className:"rv-continuous-color-legend",style:{width:r,height:a},children:[Object(I.jsx)("div",{className:"rv-gradient",style:{background:"linear-gradient(to right, ".concat(t.join(","),")")}}),Object(I.jsxs)("div",{className:"rv-legend-titles",children:[Object(I.jsx)("span",{className:"rv-legend-titles__left",children:i}),Object(I.jsx)("span",{className:"rv-legend-titles__right",children:n}),o?Object(I.jsx)("span",{className:"rv-legend-titles__center",children:o}):null]})]})},L=(i(94),i(63)),R=i.n(L);let V=R()("0");const J=e=>{V=R()(String(e))};var _=()=>V(),H=i(3),Y=i(72),U=i.n(Y);const W=()=>new H.E(_()-.5,_()-.5,_()-.5),B=()=>{const e=new H.E(2*_()-1,2*_()-1,2*_()-1);return e.length()<1e-5?B():e.normalize()},G=(e,t)=>(new H.s).fromArray(e.elements.map(((e,i)=>e+t.elements[i]))),q=e=>(new H.t).set(e.elements[0],e.elements[1],e.elements[2],0,e.elements[3],e.elements[4],e.elements[5],0,e.elements[6],e.elements[7],e.elements[8],0,0,0,0,1),X=(e,t)=>(new H.s).set(e.x*t.x,e.x*t.y,e.x*t.z,e.y*t.x,e.y*t.y,e.y*t.z,e.z*t.x,e.z*t.y,e.z*t.z),Z=(e,t,i)=>{const o=(e,t,i,o,n)=>{const a=Math.abs(o)<1e-5?1e10:((o>0?1:-1)*n/2-i)/o;return e.clone().add(t.clone().multiplyScalar(a))},n=o(e,t,e.x,t.x,i.x),a=o(e,t,e.y,t.y,i.y),r=o(e,t,e.z,t.z,i.z),s=n.clone().sub(e).dot(t),l=a.clone().sub(e).dot(t),c=r.clone().sub(e).dot(t);return s<l&&s<c?n:l<c?a:r},$=(e,t,i,o,n,a)=>{const r=n=>{const a=(new H.E).fromArray(n).normalize();return e.clone().sub(i).add(Q(t,a)).add(Q(o,a)).dot(a)};if(n){const e=r(n.toArray());if(e<a)return[e,n]}const s=(l=r,c=(n||i.clone().sub(e).normalize()).toArray(),U.a.nelderMead(l,c));var l,c;return[s.fx,(new H.E).fromArray(s.x).normalize()]},K=(e,t,i)=>e.multiply(G(X(t,t).multiplyScalar(i/t.dot(t)),new H.s)),Q=(e,t)=>{const i=t.clone();i.applyMatrix3(e.clone().transpose());const o=i.length();return o>1e-5&&i.divideScalar(o),i.applyMatrix3(e)},ee=e=>{for(let t=e.length-1;t>0;t--){const i=Math.floor(_()*(t+1));[e[t],e[i]]=[e[i],e[t]]}return e},te=()=>"#"+_().toString(16).substr(2,6),ie=e=>new H.f(parseInt(e.substr(1,6).substr(0,2),16)/255,parseInt(e.substr(1,6).substr(2,2),16)/255,parseInt(e.substr(1,6).substr(4,2),16)/255),oe=(e,t)=>{if(!(((e||{}).attributes||{}).position||{}).count)return e;const i=ie(t);return e.setAttribute("color",new H.d(new Float32Array(Array(e.attributes.position.count).fill(i.toArray()).flat()),3))},ne=e=>(new H.f).setHSL(2/3*(1-e),1,.5),ae=(e,t)=>{let{min:i,max:o}=t;return ne((e-i)/(o-i))};var re=i(180);const se=e=>(new H.l).fromBufferGeometry(e);var le=(e,t)=>{let i=0,o=0;for(let a=0;a<e.length;++a){const t=se(e[a]);i+=t.vertices.length,o+=t.faces.length,t.dispose()}const n=["ply","format ".concat(t.binary?t.littleEndian?"binary_little_endian":"binary_big_endian":"ascii"," 1.0"),"element vertex ".concat(i),"property float x","property float y","property float z",t.includeNormals?"property float nx\nproperty float ny\nproperty float nz":"",t.includeColors?"property uchar red\nproperty uchar green\nproperty uchar blue":"","element face ".concat(o),"property list uchar int vertex_index","end_header"].filter((e=>""!==e)).join("\n");if(t.binary){const a=4,r=(new TextEncoder).encode(n+"\n"),s=i*(12+(t.includeNormals?12:0)+(t.includeColors?3:0)),l=o*(3*a+1),c=new DataView(new ArrayBuffer(r.length+s+l));new Uint8Array(c.buffer).set(r,0);let m=r.length;e.forEach((e=>{const i=se(e),o=i.vertices.map((()=>new H.f(1,1,1))),n=i.vertices.map((()=>new H.E(0,0,0)));i.faces.forEach((e=>[e.a,e.b,e.c].forEach(((t,i)=>{o[t]=e.vertexColors[i],n[t]=e.vertexNormals[i]})))),i.vertices.forEach(((e,i)=>{e.toArray().forEach((e=>{c.setFloat32(m,e,t.littleEndian),m+=4})),t.includeNormals&&n[i].toArray().forEach((e=>{c.setFloat32(m,e,t.littleEndian),m+=4})),t.includeColors&&o[i].toArray().forEach((e=>{c.setUint8(m,Math.floor(255*e)),m+=1}))})),i.dispose()}));let d=0;return e.forEach((e=>{const i=se(e);i.faces.forEach((e=>{c.setUint8(m,3),m+=1,[e.a,e.b,e.c].forEach((e=>{c.setUint32(m,d+e,t.littleEndian),m+=a}))})),d+=i.vertices.length,i.dispose()})),c.buffer}{let i=0;const o=[],a=[];return e.forEach((e=>{const n=se(e),r=n.vertices.map((()=>new H.f(1,1,1))),s=n.vertices.map((()=>new H.E(0,0,0)));n.faces.forEach((e=>[e.a,e.b,e.c].forEach(((t,i)=>{r[t]=e.vertexColors[i],s[t]=e.vertexNormals[i]})))),o.push(n.vertices.map(((e,i)=>[[e.toArray(),t.includeNormals?s[i].toArray():[]].flat().map((e=>e.toString())).map((e=>e.includes(".")?e:e+".0")),t.includeColors?r[i].toArray().map((e=>Math.floor(255*e))):[]].flat().join(" ")))),a.push(n.faces.map((e=>"3 ".concat(i+e.a," ").concat(i+e.b," ").concat(i+e.c)))),i+=n.vertices.length,n.dispose()})),[n,o.flat().join("\n"),a.flat().join("\n")].join("\n")}};const ce=(e,t,i,o,n,a,r)=>{const s={pos:e.clone(),radius:t,deformation:i,minDiameter:o,movement:n,id:Object(re.a)(),shape:(new H.s).multiplyScalar(o.map(2*t)/2),color:a||te(),axisCache:{}},l=()=>2*Math.cbrt(s.shape.determinant()),c=e=>e?ae(l(),e):ie(s.color),m=()=>q(s.shape).setPosition(s.pos),d=e=>{const t=new H.z(1,16,16).applyMatrix4(m());t.computeVertexNormals();const i=c(e);t.faces.forEach((e=>e.vertexColors=new Array(3).fill(!0).map((()=>i))));const o=(new H.e).fromGeometry(t);return delete o.attributes.uv,o};return r&&(s.mesh=new H.u(d(null),new H.w({color:s.color}))),Object.assign(s,{dispose:()=>{s.mesh&&(s.mesh.geometry.dispose(),[s.mesh.material].flat().map((e=>e.dispose())))},clone:()=>{const e=ce(s.pos,s.radius,s.deformation,s.minDiameter,s.movement,s.color,!!s.mesh);return e.shape=s.shape,e},boundingBox:e=>{const t=(e=>{const t=Q(s.shape,new H.E(1,0,0)).dot(new H.E(1,0,0)),i=Q(s.shape,new H.E(0,1,0)).dot(new H.E(0,1,0)),o=Q(s.shape,new H.E(0,0,1)).dot(new H.E(0,0,1));return new H.E(t+e/2,i+e/2,o+e/2)})(e);return new H.b(s.pos.clone().sub(t),s.pos.clone().add(t))},containsPoint:e=>e.clone().sub(s.pos).applyMatrix3((new H.s).getInverse(s.shape)).length()<1,keepInVoxel:(e,t)=>{s.pos.fromArray(s.pos.toArray().map(((t,i)=>Math.min(Math.max(t,-e.getComponent(i)/2),e.getComponent(i)/2))))},collision:(e,t,i)=>{const o=e.pos.clone().sub(s.pos);if(o.dot(o)<1e-5){const t=B().multiplyScalar(1e-4);return s.pos.sub(t),void e.pos.add(t)}const[n,a]=$(s.pos,s.shape,e.pos,e.shape,s.axisCache[e.id],i);s.axisCache[e.id]=a;let r=n+t;if(r<0)return;const l=e.radius/s.radius,c=Q(s.shape,a).dot(a),m=Q(e.shape,a).dot(a),d=s.deformation.map(2*c)/(2*c)*Math.min(l,1),p=e.deformation.map(2*m)/(2*m)*Math.min(1/l,1),h=s.minDiameter.map(2*s.radius)/(2*c),x=e.minDiameter.map(2*e.radius)/(2*m),u=Math.max(-r*d,h-1),b=Math.max(-r*p,x-1);K(s.shape,a,u),K(e.shape,a,b),r+=u*c+b*m;const j=s.movement*l,f=e.movement,g=r/(j+f);s.pos.sub(a.clone().multiplyScalar(j*g)),e.pos.add(a.clone().multiplyScalar(f*g))},getOverlap:(e,t,i)=>{const[o,n]=$(s.pos,s.shape,e.pos,e.shape,s.axisCache[e.id],i);return s.axisCache[e.id]=n,Math.max(o+t,0)},getSurfacePoint:(e,t)=>{const i=(new H.s).getInverse(s.shape),o=e.clone().sub(s.pos).applyMatrix3(i),n=t.clone().applyMatrix3(i);n.normalize();const a=o.clone().sub(n.clone().multiplyScalar(n.dot(o))),r=a.length();if(r>1)return;const l=n.multiplyScalar(Math.sqrt(1-r**2));return a.clone().add(l).applyMatrix3(s.shape).add(s.pos)},grow:e=>{s.shape=e>=0?G(s.shape.multiplyScalar(1-e),(new H.s).multiplyScalar(s.radius*e)):G(s.shape.multiplyScalar(1+e),(new H.s).multiplyScalar(-e*s.minDiameter.map(2*s.radius)/2))},getColor:c,draw:(e,t,i)=>{const o=d(i);if(t&&(s.mesh=new H.u(o,new H.w({color:c(i)}))),s.mesh)return s.mesh.geometry=o,s.mesh.matrixAutoUpdate=!1,s.mesh.matrix=m(),s.mesh.updateMatrix(),e.add(s.mesh),s.mesh},getMatrix4:m,diameter:l,crossSectionDiameter:e=>(e.normalize(),2*Math.sqrt(s.shape.determinant()/Q(s.shape,e).dot(e))),toPLY:(e,t)=>{if(!s.mesh)return"";const i=s.mesh.geometry,o=i instanceof H.l?(new H.e).fromGeometry(i):i;return le([o],{binary:e,includeColors:!t,includeNormals:!t,littleEndian:!1})}})};var me=ce;const de=(e,t)=>{if(1===e.length)return{ellipsoid:e[0],aabb:e[0].boundingBox(t),containsPoint:t=>e[0].containsPoint(t)};const i=de(e.slice(0,Math.ceil(e.length/2)),t),o=de(e.slice(Math.ceil(e.length/2)),t),n=i.aabb.clone().union(o.aabb);return{a:i,b:o,aabb:n,containsPoint:e=>!!n.containsPoint(e)&&(i.containsPoint(e)||o.containsPoint(e))}},pe=(e,t,i,o)=>{if(!e.aabb.intersectsBox(t.aabb))return;if(t.ellipsoid)return e.ellipsoid?e.ellipsoid.collision(t.ellipsoid,i,o):pe(t,e,i,o);const n=()=>{t.a&&pe(t.a,e,i,o)},a=()=>{t.b&&pe(t.b,e,i,o)};_()<.5?(n(),a()):(a(),n())},he=(e,t,i,o)=>e.aabb.intersectsBox(t.aabb)?t.ellipsoid?e.ellipsoid?e.ellipsoid.getOverlap(t.ellipsoid,i,o):he(t,e,i,o):t.a&&t.b?Math.max(he(t.a,e,i,o),he(t.b,e,i,o)):0:0,xe=(e,t,i,o,n,a)=>{const r=(t,i,o,n)=>{const a=e[o].shape;e[o].shape=a.clone().multiplyScalar(n);const r=e[o].getSurfacePoint(t,i);return e[o].shape=a,r},s=e.map(((t,i)=>e[Math.min(i+1,e.length-1)].pos.clone().sub(e[Math.max(i-1,0)].pos))).map((e=>e.normalize())),l=s.map(((e,t)=>{const i=new H.E(0,0,0);let o=0;return s.forEach(((e,n)=>{const a=Math.abs((t-n)/s.length),r=Math.exp(-.5*(a/.05)**2);i.add(s[n].clone().multiplyScalar(r)),o+=r})),i.multiplyScalar(1/o)})),c=new H.E(1,0,0),m=new H.E(0,1,0),d=l[0].clone().cross(c),p=l[0].clone().cross(m),h=[...Array(l.length)].map((()=>new H.E(0,0,0)));l.forEach(((e,t)=>{h[t]=0!==t?l[t-1].clone().cross(h[t-1]).cross(l[t]).normalize():d.length()>p.length()?d:p}));const x=e.map(((t,n)=>{const a=l[n].clone().cross(h[n]).normalize();return[...Array(o)].map(((s,l)=>{const c=2*Math.PI*l/o,m=h[n].clone().multiplyScalar(Math.cos(c)).add(a.clone().multiplyScalar(Math.sin(c)));let d=r(t.pos,m,n,i)||new H.E(0,0,0),p=d.clone().sub(t.pos).dot(m);for(let o=n+1;o<e.length;++o){const e=r(t.pos,m,o,i);if(!e)break;const n=e.clone().sub(t.pos).dot(m);n<p||(d=e,p=n)}for(let e=n-1;e>=0;--e){const o=r(t.pos,m,e,i);if(!o)break;const n=o.clone().sub(t.pos).dot(m);n<p||(d=o,p=n)}return d}))})),u=new H.e;u.setAttribute("position",new H.k(x.flat().map((e=>e.toArray())).flat(),3)),u.setAttribute("color",new H.k(x.map(((i,o)=>i.map((()=>(n?ae(e[o].crossSectionDiameter(e[Math.min(o+1,e.length-1)].pos.clone().sub(e[Math.max(o-1,0)].pos)),a):ie(t)).toArray())))).flat().flat(),3)),u.setIndex(x.slice(0,x.length-1).map(((e,t)=>e.map(((e,i)=>{const n=t*o+i,a=t*o+(i+1)%o,r=(t+1)*o+i,s=(t+1)*o+(i+1)%o;return[new H.j(n,a,r),new H.j(r,a,s)]})))).flat().flat().map((e=>[e.a,e.b,e.c])).flat()),u.computeVertexNormals();const b=u,j=new H.u(b,new H.v({vertexColors:!0,side:H.h}));return u.dispose(),b.dispose(),j};var ue=(e,t,i,o,n,a)=>{let{deformation:r,minDiameter:s,ellipsoidSeparation:l,voxelSize:c}=a;const m={start:Z(e,t,c),end:Z(e,t.clone().negate(),c),gRatio:n||1,ellipsoidDensity:1/l.map(2*i),voxelSize:c,deformation:r,minDiameter:s,color:o||te(),meshes:[],radius:i,ellipsoids:[],collisionTree:{aabb:new H.b(new H.E(0,0,0),new H.E(0,0,0)),containsPoint:()=>!1}};m.radius/=m.gRatio,m.ellipsoids=[me(m.start,m.radius,r,s,1,m.color,!1),me(m.end,m.radius,r,s,1,m.color,!1)];const d=()=>{const e=p(),t=1+Math.max(Math.ceil(e*m.ellipsoidDensity),1),i=e/(t-1);let o=0,n=0;m.ellipsoids=[...Array(t)].map((()=>{for(;n+2<m.ellipsoids.length;){const e=m.ellipsoids[n].pos.clone().sub(m.ellipsoids[n+1].pos).length();if(o<e)break;o-=e,++n}const e=o/m.ellipsoids[n].pos.clone().sub(m.ellipsoids[n+1].pos).length(),t=me(m.ellipsoids[n].pos.clone().multiplyScalar(1-e).add(m.ellipsoids[n+1].pos.clone().multiplyScalar(e)),m.radius,m.deformation,m.minDiameter,1,m.color,!1);return t.shape=G(m.ellipsoids[n].shape.clone().multiplyScalar(1-e),m.ellipsoids[n+1].shape.clone().multiplyScalar(e)),o+=i,t}))},p=()=>{let e=0;for(let t=0;t+1<m.ellipsoids.length;++t)e+=m.ellipsoids[t].pos.clone().sub(m.ellipsoids[t+1].pos).length();return e},h=(e,t,i,o,n)=>{if(!i)return xe(m.ellipsoids,m.color,e,t,o,n);const a=m.ellipsoids[0].pos,r=m.ellipsoids[m.ellipsoids.length-1].pos,s=r.clone().sub(a).normalize(),l=new H.E(1,0,0).cross(s).normalize(),c=[];for(let d=m.ellipsoids.length-1;d>1;--d){const e=m.ellipsoids[d].clone();e.pos.sub(a).applyAxisAngle(l,Math.PI).add(a),c.push(e)}for(let d=0;d<m.ellipsoids.length;++d){const e=m.ellipsoids[d].clone();c.push(e)}for(let d=m.ellipsoids.length-1;d>1;--d){const e=m.ellipsoids[d].clone();e.pos.sub(r).applyAxisAngle(l,Math.PI).add(r),c.push(e)}return xe(c,m.color,e,t,o,n)};return d(),Object.assign(m,{dispose:()=>{m.ellipsoids.forEach((e=>e.dispose())),m.meshes.forEach((e=>{e.geometry.dispose(),[e.material].flat().map((e=>e.dispose()))}))},keepInVoxel:e=>{const t=m.ellipsoids[0],i=m.ellipsoids[m.ellipsoids.length-1];m.ellipsoids.slice(1,m.ellipsoids.length-1).forEach((t=>{t.keepInVoxel(m.voxelSize,e)})),[t,i].forEach((e=>{const t=Math.min(...e.pos.toArray().map(((e,t)=>m.voxelSize.getComponent(t)/2-Math.abs(e))));e.pos.fromArray(e.pos.toArray().map(((e,i)=>m.voxelSize.getComponent(i)/2-Math.abs(e)===t?e=Math.sign(e)*(m.voxelSize.getComponent(i)/2):e)))}))},computeCollisionTree:e=>{m.collisionTree=de(m.ellipsoids,e)},collision:(e,t,i)=>pe(m.collisionTree,e.collisionTree,t,i),getOverlap:(e,t,i)=>he(m.collisionTree,e.collisionTree,t,i),getMinAndMaxDiameter:()=>{const e=m.ellipsoids.map(((e,t)=>e.crossSectionDiameter(m.ellipsoids[Math.min(t+1,m.ellipsoids.length-1)].pos.clone().sub(m.ellipsoids[Math.max(t-1,0)].pos))));return{min:Math.min(...e),max:Math.max(...e)}},grow:e=>{m.ellipsoids.forEach((t=>t.grow(e)))},contract:e=>{for(let t=1;t+1<m.ellipsoids.length;++t){const i=m.ellipsoids[t+1].pos.clone().add(m.ellipsoids[t-1].pos).divideScalar(2),o=m.ellipsoids[t+1].pos.clone().sub(m.ellipsoids[t-1].pos);o.normalize(),i.sub(m.ellipsoids[t].pos),o.multiplyScalar(i.dot(o)),i.sub(o),m.ellipsoids[t].pos.add(i.multiplyScalar(e))}d()},redistribute:d,getLength:p,getSurfacePoint:(e,t)=>m.ellipsoids.reduce(((i,o)=>{const n=o.getSurfacePoint(e,t);if(!i)return n;const a=i.clone().sub(e).dot(t);if(!n)return i;return n.clone().sub(e).dot(t)>a?n:i}),void 0),generatePipe:h,generatePipes:(e,t,i,o,n)=>{const a=h(1,t,i,o,n),r=h(m.gRatio,t,i,o,n);e.add(a),e.add(r),m.meshes.forEach((e=>{e.geometry.dispose(),[e.material].flat().map((e=>e.dispose()))})),m.meshes=[a,r]},generateSkeleton:(e,t,i)=>{let o=(new H.e).setFromPoints(m.ellipsoids.map((e=>e.pos)));if(t){const e=m.ellipsoids.map(((e,t)=>ae(e.crossSectionDiameter(m.ellipsoids[Math.min(t+1,m.ellipsoids.length-1)].pos.clone().sub(m.ellipsoids[Math.max(t-1,0)].pos))*m.gRatio,i).toArray())).flat();o.setAttribute("color",new H.d(new Float32Array(e),3))}else o=oe(o,m.color);const n=new H.p(o,new H.q({vertexColors:!0,side:H.h}));m.meshes.forEach((e=>{e.geometry.dispose(),[e.material].flat().map((e=>e.dispose()))})),m.meshes=[n],e.add(n)},draw:(e,t,i)=>{if(t)return m.ellipsoids.map((t=>t.draw(e,!0,i)));const o=oe(new H.y(1,16,16),m.color),n=new H.v({vertexColors:!0,side:H.h}),a=new H.m(o,n,m.ellipsoids.length);m.ellipsoids.forEach(((e,t)=>{a.setMatrixAt(t,e.getMatrix4())})),e.add(a),m.meshes=[a]},toJSON:()=>({position:[m.start.x,m.start.y,m.start.z],direction:[m.end.x-m.start.x,m.end.y-m.start.y,m.end.z-m.start.z],maxDiameter:m.radius*m.gRatio*2,color:m.color,gRatio:m.gRatio,ellipsoids:m.ellipsoids.map(((e,t)=>{const i=e.crossSectionDiameter(m.ellipsoids[Math.min(t+1,m.ellipsoids.length-1)].pos.clone().sub(m.ellipsoids[Math.max(t-1,0)].pos));return{position:[e.pos.x,e.pos.y,e.pos.z],shape:e.shape.elements,axonDiameter:i*m.gRatio,myelinDiameter:i}}))}),toPLY:(e,t,i)=>{const o=m.meshes[i].geometry,n=o instanceof H.l?(new H.e).fromGeometry(o):o;return le([n],{binary:e,includeColors:!t,includeNormals:!t,littleEndian:!1})}})};const be=(e,t,i,o)=>{if(i===o)return e[i].y;if(i+1===o)return((e,t,i)=>t.y+(i.y-t.y)*(e-t.x)/(i.x-t.x))(t,e[i],e[o]);const n=(i+o)/2;return t<e[n].x?be(e,t,i,n):be(e,t,n,o)},je=(e,t)=>be(e,t,0,e.length-1);var fe=e=>{let{from:t,to:i}=e;const o=t.map(((e,t)=>({x:e,y:i[t]}))),n=o.map((e=>({x:e.y,y:e.x})));return{values:o,valuesInverse:n,map:e=>je(o,e),mapInverse:e=>je(n,e),toJSON:()=>({from:o.map((e=>e.x)),to:o.map((e=>e.y))})}};let ge=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-4;t=Math.max(t,Number.EPSILON);let i={},o=e.getIndex(),n=e.getAttribute("position"),a=o?o.count:n.count,r=0,s=Object.keys(e.attributes),l={},c={},m=[],d=["getX","getY","getZ","getW"];for(let u=0,b=s.length;u<b;u++){let t=s[u];l[t]=[];let i=e.morphAttributes[t];i&&(c[t]=new Array(i.length).fill().map((()=>[])))}let p=Math.log10(1/t),h=Math.pow(10,p);for(let u=0;u<a;u++){let t=o?o.getX(u):u,n="";for(let i=0,o=s.length;i<o;i++){let o=s[i],a=e.getAttribute(o),r=a.itemSize;for(let e=0;e<r;e++)n+="".concat(~~(a[d[e]](t)*h),",")}if(n in i)m.push(i[n]);else{for(let i=0,o=s.length;i<o;i++){let o=s[i],n=e.getAttribute(o),a=e.morphAttributes[o],r=n.itemSize,m=l[o],p=c[o];for(let e=0;e<r;e++){let i=d[e];if(m.push(n[i](t)),a)for(let e=0,o=a.length;e<o;e++)p[e].push(a[e][i](t))}}i[n]=r,m.push(r),r++}}const x=e.clone();for(let u=0,b=s.length;u<b;u++){let t=s[u],i=e.getAttribute(t),o=new i.array.constructor(l[t]),n=new H.d(o,i.itemSize,i.normalized);if(x.setAttribute(t,n),t in c)for(let a=0;a<c[t].length;a++){let i=e.morphAttributes[t][a],o=new i.array.constructor(c[t][a]),n=new H.d(o,i.itemSize,i.normalized);x.morphAttributes[t][a]=n}}return x.setIndex(m),x};const Oe=e=>new H.r(new H.i(new H.c(e.x,e.y,e.z)),new H.q({color:16777215,linewidth:2}));var we=e=>{const t={voxelSize:"number"===typeof e.voxelSize?new H.E(e.voxelSize,e.voxelSize,e.voxelSize):(new H.E).fromArray(e.voxelSize),deformation:fe(e.mapFromDiameterToDeformationFactor),minDiameter:fe(e.mapFromMaxDiameterToMinDiameter),ellipsoidSeparation:fe(e.mapFromMaxDiameterToEllipsoidSeparation),axons:[],cells:[],updateState:{name:"ready",progress:0},focus:{type:"",object:null},minAndMaxDiameterAxons:{min:0,max:0},minAndMaxDiameterCells:{min:0,max:0}};(e.axons||[]).forEach((e=>{t.axons.push(ue(new H.E(...e.position),new H.E(...e.direction),e.maxDiameter/2,e.color,e.gRatio,t));const i=t.axons[t.axons.length-1];e.ellipsoids&&i.ellipsoids.forEach(((t,o)=>{const n=(e.ellipsoids.length-1)*(o/(i.ellipsoids.length-1)),a=Math.min(Math.floor(n),e.ellipsoids.length-2),r=n-a;t.pos=new H.E(...e.ellipsoids[a].position).clone().multiplyScalar(1-r).add(new H.E(...e.ellipsoids[a+1].position).clone().multiplyScalar(r)),t.shape=G((new H.s).fromArray(e.ellipsoids[a].shape).clone().multiplyScalar(1-r),(new H.s).fromArray(e.ellipsoids[a+1].shape).clone().multiplyScalar(r))}))}));const i=()=>{const e=t.axons.map((e=>e.getMinAndMaxDiameter())),i=t.cells.map((e=>e.diameter()));t.minAndMaxDiameterAxons={min:Math.min(...e.map((e=>e.min))),max:Math.max(...e.map((e=>e.max)))},t.minAndMaxDiameterCells={min:Math.min(...i),max:Math.max(...i)}};(e.cells||[]).forEach((e=>{const i=(new H.s).fromArray(e.shape),o=me(new H.E(...e.position),Math.cbrt(i.determinant()),fe({from:[0],to:[0]}),fe({from:[0],to:[0]}),0,e.color,!0);o.shape=i.clone(),t.cells.push(o)})),i();const o=e=>{t.axons.forEach((t=>t.keepInVoxel(e)))},n=(e,i)=>{t.axons.forEach((t=>t.computeCollisionTree(e)));const o=[];t.axons.forEach(((e,i)=>{t.axons.forEach(((t,n)=>{i<n&&o.push(ee([e,t]))}))})),ee(o),o.forEach((t=>t[0].collision(t[1],e,i))),t.axons.forEach((o=>o.ellipsoids.forEach((o=>t.cells.forEach((t=>o.collision(t,e,i)))))))},a=(e,i)=>{let o=i;return t.axons.forEach((t=>t.computeCollisionTree(e))),t.axons.forEach(((i,n)=>{t.axons.forEach(((t,a)=>{n>=a||(o=Math.max(o,i.getOverlap(t,e,o)))}))})),o},r=(e,i)=>{t.axons.forEach((e=>e.computeCollisionTree(0)));let o=0,n=0;for(let a=0;a<e;++a)for(let r=0;r<e;++r)for(let s=0;s<e;++s){const l=new H.E(a+.5,r+.5,s+.5).divideScalar(e).sub(new H.E(.5,.5,.5)).multiply((new H.E).fromArray(t.voxelSize.toArray().map((e=>e-2*i))));let c=!1;t.axons.forEach((e=>{e.collisionTree.containsPoint(l)&&(c=!0)})),c&&++o,c=!1,t.cells.forEach((e=>{e.containsPoint(l)&&(c=!0)})),c&&++n}return[o/(e*e*e),n/(e*e*e)]},s=(e,i,o,n)=>(t.axons.forEach((a=>{a.generatePipes(e,i,o,n,t.minAndMaxDiameterAxons)})),e),l=e=>{e.add(new H.a(16777215,.4));const t=new H.g(16777215,.4);t.position.set(0,1,0),e.add(t)},c=(e,i,o)=>{if("none"===i)return;e.add(Oe(t.voxelSize));const n=(new H.E).fromArray(t.voxelSize.toArray().map((e=>e-2*o)));o>0&&e.add(Oe(n))},m=(e,i,o,n,a)=>{switch(i){case"skeleton":t.axons.forEach((i=>i.generateSkeleton(e,o,t.minAndMaxDiameterAxons)));break;case"pipes":s(e,n,a,o);break;case"ellipsoids":t.axons.forEach((i=>i.draw(e,o,t.minAndMaxDiameterAxons)))}},d=(e,i)=>{"none"!==i&&t.cells.forEach((i=>i.draw(e,!0,t.minAndMaxDiameterCells)))},p=()=>{t.axons.forEach((e=>{e!==(t.focus||{}).object&&e.meshes.forEach((e=>e.material=new H.v({vertexColors:!0,side:H.h})))})),t.cells.forEach((e=>{e!==t.focus.object&&e.mesh&&(e.mesh.material=new H.w({color:e.getColor(t.minAndMaxDiameterCells)}))}))};return Object.assign(t,{dispose:()=>{t.axons.forEach((e=>e.dispose())),t.cells.forEach((e=>e.dispose()))},toJSON:()=>({voxelSize:t.voxelSize.toArray(),mapFromDiameterToDeformationFactor:t.deformation.toJSON(),mapFromMaxDiameterToMinDiameter:t.minDiameter.toJSON(),mapFromMaxDiameterToEllipsoidSeparation:t.ellipsoidSeparation.toJSON(),axons:t.axons.map((e=>e.toJSON())),cells:t.cells.map((e=>({position:e.pos.toArray(),shape:e.shape.elements,color:e.color})))}),toPLY:(e,i)=>le([t.axons.map((e=>e.meshes.filter(((t,i)=>1!==i||1!==Number(e.gRatio))).map((e=>e.geometry)))),t.cells.map((e=>{var t;return(null===(t=e.mesh)||void 0===t?void 0:t.geometry)||new H.e}))].flat().flat().map((e=>e instanceof H.l?(new H.e).fromGeometry(e):e)).map((e=>ge(e))),{binary:e,includeColors:!i,includeNormals:!i,littleEndian:!1}),keepInVoxel:o,collision:n,getOverlap:a,addAxonsRandomly:(e,o)=>{for(let i=0;i<e;++i)t.axons.push(ue(W().multiply(t.voxelSize),W(),.1+10*_(),void 0,o,t));i(),console.log("Total number of axons: "+t.axons.length)},addCellsRandomly:(e,o)=>{for(let i=0;i<e;++i){const e=W().multiply(t.voxelSize),i=2.5+7*_();t.cells.push(me(e,i,fe({from:[0,1],to:[0,0]}),fe({from:[0,1],to:[0,.01]}),1,void 0,!0))}const n=1e-4;t.cells.forEach((e=>e.grow(1)));for(let i=1;i>n;)t.cells.forEach(((e,i)=>{t.cells.forEach(((t,o)=>{i>=o||e.collision(t,n,n)}))})),i=0,t.cells.forEach((e=>e.keepInVoxel(t.voxelSize,o))),t.cells.forEach(((e,o)=>{t.cells.forEach(((t,n)=>{o>=n||(i=Math.max(i,e.getOverlap(t,0,i)))}))})),t.cells.forEach((e=>e.grow(-.05)));t.cells.forEach((e=>{e.deformation=fe({from:[0],to:[0]}),e.movement=0})),i()},volumeFraction:r,update:(e,s,l,c,m)=>{switch(t.updateState.name){case"ready":t.updateState={name:"grow",progress:0};break;case"grow":t.axons.forEach((t=>t.grow(e))),t.updateState={name:"contract",progress:0};break;case"contract":for(let e=0;e<s;++e)t.axons.forEach((t=>t.contract(Math.min(s-e,1))));t.updateState={name:"keepInVoxel",progress:0};break;case"keepInVoxel":o(l),t.updateState.name="collision";break;case"collision":n(l,c),t.updateState.name="getOverlap";break;case"getOverlap":if(a(l,.999*c)<c){t.updateState={name:"volumeFraction",progress:0};break}++t.updateState.progress,100===t.updateState.progress?t.updateState={name:"volumeFraction",progress:0}:t.updateState.name="keepInVoxel";break;case"volumeFraction":{const[e,o]=r(20,m);t.updateState={name:"ready",progress:0,volumeFraction:[e,o]},i();break}default:t.updateState={name:"ready",progress:0}}return t.updateState},generatePipes:s,drawLight:l,drawVoxels:c,drawAxons:m,drawCells:d,computeMinAndMaxDiameter:i,draw:(e,t,i,o,n,a,r)=>{const s=new H.x;return l(s),c(s,e,a),d(s,i),m(s,t,r,o,n),s},point:(e,i)=>{var o;let n={type:"",object:null},a=1e7;const r=e.clone().add(i.clone().multiplyScalar(1e6)),s=i.clone().negate();if([t.axons.map((e=>({type:"axon",object:e}))),t.cells.map((e=>({type:"cell",object:e})))].flat().forEach((t=>{const o=t.object.getSurfacePoint(r,s);if(!o)return;const l=i.dot(o.clone().sub(e));l>a||(a=l,n=t)})),a<1e5&&t.focus.object===n.object)return t.focus;var l;l=n.type,n.object,"axon"===l&&n.object.meshes.forEach((e=>e.material=new H.v({color:new H.f(16777215),side:H.h}))),t.focus=n;const c=null===(o=t.focus.object)||void 0===o?void 0:o.mesh;return null!==c&&void 0!==c&&c.material&&(c.material=new H.w({color:new H.f(16777215)})),p(),t.focus},deselectAll:p})},ye=e=>{const t=Array(100).fill(!0).map(((e,t)=>"#"+o.scaledValueToColor(t/99).getHexString()));return Object(I.jsx)(P,{width:e.width,startTitle:e.min.toFixed(2)+" \xb5m",midTitle:((e.min+e.max)/2).toFixed(2)+" \xb5m",endTitle:e.max.toFixed(2)+" \xb5m",orientation:"vertical",colors:t})},ve=i(35),De=i.n(ve),Se=i(79);const Ee=Object(b.a)((e=>({gridItem:{padding:e.spacing(2),textAlign:"center"}})));var Me={title:"Toolbox",path:"/toolbox",component:()=>{const[e,t]=Object(Se.a)(),i=.55*e,o=.85*t,a=Ee(),r=Object(n.useRef)(),s=1e-4,[l,c]=Object(n.useState)(null),[m,d]=Object(n.useState)(null),[h,u]=Object(n.useState)(null),[b,P]=Object(n.useState)(null),[L,R]=Object(n.useState)(null),[V,_]=Object(n.useState)(0),[H,Y]=Object(n.useState)("all"),[U,W]=Object(n.useState)("ellipsoids"),[B,G]=Object(n.useState)(!1),[q,X]=Object(n.useState)(32),[Z,$]=Object(n.useState)("all"),[K,Q]=Object(n.useState)([]),[ee,te]=Object(n.useState)(null),[ie,oe]=Object(n.useState)(0),[ne,ae]=Object(n.useState)([100,100,100]),[re,se]=Object(n.useState)(50),[le,ce]=Object(n.useState)(0),[me,de]=Object(n.useState)(.02),[pe,he]=Object(n.useState)(1),[xe,ue]=Object(n.useState)(.07),be=Object(n.useRef)(),[je,fe]=Object(n.useState)(null),[ge,Oe]=Object(n.useState)({}),[ve,Me]=Object(n.useState)(null),[Ae,Ce]=Object(n.useState)(null),[Te,ke]=Object(n.useState)(!1),[Ne,ze]=Object(n.useState)({from:[0,2],to:[0,.2]}),[Fe,Ie]=Object(n.useState)({from:[0,2],to:[0,.2]}),[Pe,Le]=Object(n.useState)({from:[0,1],to:[0,.25]}),[Re,Ve]=Object(n.useState)(!1),[Je,_e]=Object(n.useState)(null),[He,Ye]=Object(n.useState)(!0),[Ue,We]=Object(n.useState)(!1),[Be,Ge]=Object(n.useState)(0),[qe,Xe]=Object(n.useState)(.7);return Object(n.useEffect)((()=>{const e=r.current;if(!e)return;const t=new z.c(75,i/o,.1,1e3);t.position.set(50,50,50),t.lookAt(0,0,0),u(t);const n=new z.i({antialias:!0});n.setClearColor("#000000"),n.setSize(i,o),e.appendChild(n.domElement),P(n);const a=new F.a(t,n.domElement);a.enableDamping=!0,a.dampingFactor=.5,c(a);const s=window.setInterval((()=>_((e=>e+1))),1e3/30);return()=>{window.clearInterval(s),e.removeChild(n.domElement),n.renderLists.dispose()}}),[r,i,o]),Object(n.useEffect)((()=>{if(!Re)return;if(!L)return;if(!b)return;if(!h)return;if(!["ellipsoids","pipes"].includes(U))return;const e=e=>{const t=2*(e.offsetX/i-.5)*Math.tan(i/o*75*(Math.PI/180)/2),n=2*-(e.offsetY/o-.5)*Math.tan(Math.PI/180*75/2),a=new z.h(0,0,0).clone().sub(h.position).normalize(),r=a.clone().cross(new z.h(0,1,0)).normalize(),s=r.clone().cross(a).normalize();r.multiplyScalar(t),s.multiplyScalar(n),_e(L.point(h.position,a.clone().add(r).add(s),B))},t=()=>{if(!Je)return;const e="axon"===Je.type?Je.object.meshes.filter(((e,t)=>1!==t||1!==Number(Je.object.gRatio))).map((e=>e.geometry)):[Je.object.mesh.geometry];L.focus=null,L.deselectAll(B),_e(null),Ve(!1);const t=window.prompt("File name",("axon"===Je.type?"@type":"cell")+"_@color.ply");t&&e.forEach(((e,i)=>De()(Je.object.toPLY(He,Ue,i),t.replace(/@type/g,0===i?"myelin":"axon").replace(/@color/g,Je.object.color))))};return b.domElement.addEventListener("mousemove",e),b.domElement.addEventListener("click",t),()=>{b.domElement.removeEventListener("mousemove",e),b.domElement.removeEventListener("click",t)}}),[L,b,h,U,Re,Je,q,He,Ue,i,o,B]),Object(n.useEffect)((()=>{if(l&&l.update(),b&&m&&h&&b.render(m,h),!L)return;if(!ge.name)return;if(Te&&ge.volumeFraction&&ge.volumeFraction[0]+ge.volumeFraction[1]>=ee)return ke(!1);if(JSON.stringify(ge)!==JSON.stringify(L.updateState))return;"getOverlap"===ge.name&&d(L.draw(H,U,Z,Number(q),!1,Number(Be),B));let e=ve;if("ready"===ge.name&&ge.volumeFraction&&K!==ge.volumeFraction&&(Q(ge.volumeFraction),e=(ve||0)+1),Me(e),"ready"!==ge.name||Te||e<Ae){const e={...L.update(me,pe,xe,s,Number(Be))};window.setTimeout((()=>Oe(e)),0)}else;}),[l,b,m,h,V,ge,L,H,U,q,Z,me,pe,xe,s,K,Te,ve,Ae,ee,Be]),Object(n.useEffect)((()=>{if(!je)return;const e=new FileReader;e.onload=e=>{const t=JSON.parse(e.target.result);t.voxelSize=isNaN(Number(t.voxelSize))?t.voxelSize:[t.voxelSize,t.voxelSize,t.voxelSize],L&&L.dispose();const i=we(t);oe(t.randomSeed||0),J(t.randomSeed||0),ae(t.voxelSize),Ge(t.border||0),de(t.growSpeed),he(t.contractSpeed),ue(t.minimumDistance||.07),ze(t.mapFromDiameterToDeformationFactor),Ie(t.mapFromMaxDiameterToMinDiameter),Le(t.mapFromMaxDiameterToEllipsoidSeparation),se(t.axons.length),ce(t.cells.length),R(i),d(i.draw(H,U,Z,Number(q),!1,Number(t.border),B)),Oe(i.updateState),Q(0),Ce(0),Me(0)},e.readAsText(je),fe(null)}),[je,H,U,q,Z,Be,L]),Object(I.jsx)(I.Fragment,{children:Object(I.jsxs)(j.a,{container:!0,item:!0,xs:11,children:[Object(I.jsx)(j.a,{item:!0,xs:4,style:{height:.9*window.innerHeight,overflowX:"hidden",overflowY:"scroll"},children:Object(I.jsxs)(j.a,{container:!0,direction:"column",children:[Object(I.jsx)(j.a,{item:!0,className:a.gridItem,children:Object(I.jsx)(f.a,{children:Object(I.jsxs)(p.a,{children:[Object(I.jsx)(x.a,{children:Object(I.jsx)("b",{children:"Setup"})}),Object(I.jsx)(x.a,{children:["x","y","z"].map(((e,t)=>Object(I.jsx)(g.a,{type:"number",label:"Voxel side length ".concat(e),InputProps:{endAdornment:Object(I.jsx)(O.a,{position:"start",children:"\xb5m"})},value:ne[t],onChange:e=>{const i=[...ne];i[t]=Number(e.target.value),ae(i)}},e)))}),Object(I.jsxs)(x.a,{children:[Object(I.jsx)(g.a,{type:"number",label:"Number of axons",value:re,onChange:e=>se(e.target.value)}),Object(I.jsx)(g.a,{type:"number",label:"Number of cells",value:le,onChange:e=>ce(e.target.value)})]}),Object(I.jsx)(x.a,{children:Object(I.jsx)(g.a,{type:"number",label:"g-ratio",value:qe,onChange:e=>Xe(e.target.value)})}),Object(I.jsxs)(x.a,{children:[Object(I.jsx)(w.a,{variant:"contained",onClick:()=>{L&&L.dispose();const e=we({voxelSize:ne,mapFromDiameterToDeformationFactor:Ne,mapFromMaxDiameterToMinDiameter:Fe,mapFromMaxDiameterToEllipsoidSeparation:Pe});e.addAxonsRandomly(Number(re),qe),e.addCellsRandomly(Number(le),xe),R(e),d(e.draw(H,U,Z,Number(q),!1,Number(Be),B)),Oe(e.updateState),Q(0),Me(0),Ce(0),J(ie)},children:"Initialize"}),Object(I.jsx)(w.a,{variant:"contained",onClick:()=>be.current.click(),children:"upload"}),L&&Object(I.jsx)(w.a,{variant:"contained",onClick:()=>{const e={randomSeed:ie,growSpeed:me,contractSpeed:pe,minimumDistance:xe,border:Be,...L.toJSON()};De()(JSON.stringify(e,null,4),"config.json")},children:"Download"})]}),Object(I.jsx)("input",{ref:be,type:"file",style:{display:"none"},onClick:e=>e.target.value=null,onChange:e=>fe(e.target.files[0])})]})})}),L&&Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)(j.a,{item:!0,className:a.gridItem,children:Object(I.jsx)(f.a,{children:Object(I.jsxs)(p.a,{children:[Object(I.jsx)(x.a,{children:Object(I.jsx)("b",{children:"After setup"})}),Object(I.jsxs)(x.a,{children:[Object(I.jsx)(g.a,{type:"number",label:"Grow speed",value:me,onChange:e=>de(Number(e.target.value))}),Object(I.jsx)(g.a,{type:"number",label:"Contract speed",value:pe,onChange:e=>he(Number(e.target.value))}),Object(I.jsx)(g.a,{type:"number",label:"Minimum distance",InputProps:{endAdornment:Object(I.jsx)(O.a,{position:"start",children:"\xb5m"})},value:xe,onChange:e=>ue(Number(e.target.value))})]}),Object(I.jsxs)(x.a,{children:[Object(I.jsxs)(w.a,{variant:"contained",onClick:()=>{if(Te)return ke(!1);const e=window.prompt("Specify total volume fraction target");e&&(te(e),ke(!0))},children:["Automatic growth: ",Te?"on":"off"]}),Te?Object(I.jsx)(I.Fragment,{children:Object(I.jsx)(g.a,{type:"number",label:"Target volume fraction",value:ee,onChange:e=>te(Number(e.target.value))})}):Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)(w.a,{variant:"contained",onClick:()=>Oe({...L.update(me,pe,xe,s,Number(Be))}),children:"Perform 1 grow step"}),Object(I.jsx)(w.a,{variant:"contained",onClick:()=>{const e=parseInt(window.prompt("How many grow steps?"));e&&Ce(ve+e)},children:"Perform x grow steps"})]})]}),Object(I.jsx)(j.a,{item:!0,children:Object(I.jsx)("b",{children:"Volume fraction estimation"})}),Object(I.jsx)(j.a,{item:!0,children:"Select how many \xb5m to exclude from each side of the voxel when doing the estimation:"}),Object(I.jsx)(g.a,{type:"number",label:"Border",value:Be,onChange:e=>{const t=e.target.value;Ge(t),d(L.draw(H,U,Z,Number(q),!1,Number(t),B))}}),Object(I.jsx)(y.a,{component:f.a,children:Object(I.jsx)(v.a,{className:a.table,"aria-label":"simple table",children:Object(I.jsxs)(D.a,{children:[Object(I.jsxs)(S.a,{children:[Object(I.jsx)(E.a,{component:"th",scope:"row",children:"Axons"}),Object(I.jsx)(E.a,{component:"th",scope:"row",children:"Cells"}),Object(I.jsx)(E.a,{component:"th",scope:"row",children:"Total"})]}),Object(I.jsxs)(S.a,{children:[Object(I.jsx)(E.a,{children:((K||[0,0])[0]||0).toFixed(2)}),Object(I.jsx)(E.a,{children:((K||[0,0])[1]||0).toFixed(2)}),Object(I.jsx)(E.a,{children:(((K||[0,0])[0]||0)+((K||[0,0])[1]||0)).toFixed(2)})]})]})})}),Object(I.jsxs)(j.a,{item:!0,children:["Status: ",ge.name,void 0!==ge.progress?", iteration ".concat(ge.progress):""]}),Object(I.jsxs)(j.a,{item:!0,children:["Grow steps completed: ",ve]})]})})}),Object(I.jsx)(j.a,{item:!0,className:a.gridItem,children:Object(I.jsx)(f.a,{children:Object(I.jsxs)(p.a,{children:[Object(I.jsx)(x.a,{children:Object(I.jsx)("b",{children:"Visual"})}),Object(I.jsxs)(x.a,{children:[Object(I.jsxs)(M.a,{children:[Object(I.jsx)(A.a,{children:"Voxels"}),Object(I.jsxs)(C.a,{value:H,onChange:e=>{const t=e.target.value;Y(t),d(L.draw(t,U,Z,Number(q),!1,Number(Be),B))},children:[Object(I.jsx)(T.a,{value:"none",children:"hide"}),Object(I.jsx)(T.a,{value:"all",children:"show"})]})]}),Object(I.jsxs)(M.a,{children:[Object(I.jsx)(A.a,{children:"Axons"}),Object(I.jsxs)(C.a,{value:U,onChange:e=>{const t=e.target.value,i="pipes"===t?window.prompt("Resolution",q):q;if(!i)return;const o="pipes"===t&&"yes"===window.prompt('Extended axons - "yes"/"no"',"no");i&&(W(t),X(i),d(L.draw(H,t,Z,Number(i),o,Number(Be),B)))},children:[Object(I.jsx)(T.a,{value:"none",children:"hide"}),Object(I.jsx)(T.a,{value:"ellipsoids",children:"ellipsoids"}),Object(I.jsx)(T.a,{value:"skeleton",children:"skeleton"}),Object(I.jsx)(T.a,{value:"pipes",children:"pipes"})]})]}),Object(I.jsxs)(M.a,{children:[Object(I.jsx)(A.a,{children:"Cells"}),Object(I.jsxs)(C.a,{value:Z,onChange:e=>{const t=e.target.value;$(t),d(L.draw(H,U,t,Number(q),!1,Number(Be),B))},children:[Object(I.jsx)(T.a,{value:"none",children:"hide"}),Object(I.jsx)(T.a,{value:"all",children:"show"})]})]})]}),Object(I.jsx)(x.a,{children:Object(I.jsx)(k.a,{control:Object(I.jsx)(N.a,{checked:B,onChange:e=>{const t=e.target.checked;G(t),d(L.draw(H,U,Z,Number(q),!1,Number(Be),t))},color:"primary"}),label:"Size color codes"})})]})})}),"pipes"===U&&Object(I.jsx)(j.a,{item:!0,className:a.gridItem,children:Object(I.jsx)(f.a,{children:Object(I.jsxs)(p.a,{children:[Object(I.jsx)(x.a,{children:Object(I.jsx)("b",{children:"Export"})}),Object(I.jsx)(x.a,{children:Object(I.jsx)(w.a,{variant:"contained",onClick:()=>{const e=window.prompt("File name","axons.ply");e&&De()(L.toPLY(He,Ue),e)},children:"Export as single file"})}),Object(I.jsx)(x.a,{children:Object(I.jsx)(w.a,{variant:"contained",onClick:async()=>{const e=window.prompt("File name","@type_@index_@color.ply");if(!e)return;const t=async()=>await new Promise((e=>window.setTimeout(e,100)));for(let i=0;i<L.axons.length;++i){const o=L.axons[i],n=async t=>{await De()(o.toPLY(He,Ue,t?1:0),e.replace(/@type/g,t?"axon":"myelin").replace(/@index/g,i).replace(/@color/g,o.color))};await n(!1),1!==Number(o.gRatio)&&await n(!0),await t()}if("hide"!==Z)for(let i=0;i<L.cells.length;++i){const o=L.cells[i];await De()(o.toPLY(He,Ue),e.replace(/@type/g,"cell").replace(/@index/g,i).replace(/@color/g,o.color)),await t()}},children:"Export as multiple files"})}),Object(I.jsx)(x.a,{children:Object(I.jsx)(w.a,{variant:"contained",onClick:()=>Ve(!Re),children:Re?"Select an element":"Export single element"})}),Object(I.jsx)(x.a,{children:Object(I.jsx)(k.a,{control:Object(I.jsx)(N.a,{checked:He,onChange:e=>Ye(e.target.checked),color:"primary"}),label:"Binary format"})}),Object(I.jsx)(x.a,{children:Object(I.jsx)(k.a,{control:Object(I.jsx)(N.a,{checked:Ue,onChange:e=>We(e.target.checked),color:"primary"}),label:"Simple mesh"})})]})})})]})]})}),Object(I.jsxs)(j.a,{item:!0,xs:5,children:[Object(I.jsx)("div",{ref:r}),B&&Object(I.jsxs)(I.Fragment,{children:[L.minAndMaxDiameterAxons&&Object(I.jsxs)(I.Fragment,{children:["Myelin",Object(I.jsx)(ye,{width:i,min:L.minAndMaxDiameterAxons.min,max:L.minAndMaxDiameterAxons.max})]}),L.minAndMaxDiameterCells&&Object(I.jsxs)(I.Fragment,{children:["Cells",Object(I.jsx)(ye,{width:i,min:L.minAndMaxDiameterCells.min,max:L.minAndMaxDiameterCells.max})]})]})]})]})})}};const Ae={voxelSize:10,growSpeed:.05,contractSpeed:.05,mapFromDiameterToDeformationFactor:{from:[0,.8,2],to:[0,.5,1]},mapFromMaxDiameterToMinDiameter:{from:[0,1],to:[0,.2]},mapFromMaxDiameterToEllipsoidSeparation:{from:[0,1],to:[.1,1]},axons:[{position:[0,0,0],direction:[1,0,0],maxDiameter:1,color:"#ff0000",gRatio:.7},{position:[1,.1,0],direction:[1,1,1],maxDiameter:.5,color:"#00ff00",gRatio:.5}],cells:[{position:[2,1,0],shape:[1.5,0,0,0,1,0,0,0,1],color:"#0000ff"}]};var Ce=i(47),Te=i(59),ke=i(77),Ne=i.p+"static/media/ellipsoids.0c65173b.png",ze=i.p+"static/media/pipesSide.dce5d3c2.png",Fe=i.p+"static/media/pipesFront.811a2191.png";const Ie=Object(b.a)((()=>({img:{width:400}})));var Pe=i(78),Le=i.p+"static/media/ellipsoids.d9dcf4b5.png",Re=i.p+"static/media/pipesSide.ea865c63.png",Ve=i.p+"static/media/pipesFront.4c31b931.png";const Je=Object(b.a)((()=>({img:{width:400}})));var _e={title:"Examples",path:"/examples",component:e=>Object(I.jsx)(m.d,{children:_e.items.map(((t,i)=>Object(I.jsx)(m.b,{path:"".concat(e.match.path).concat(t.path),component:t.component},i)))}),items:[{title:"Getting started",path:"/getting_started",component:()=>Object(I.jsxs)(I.Fragment,{children:["If you just want to try out the toolbox and see that it works try out the following:",Object(I.jsxs)("ul",{children:[Object(I.jsx)("li",{children:'Under "Setup" Press "Initialize"'}),Object(I.jsx)("li",{children:'Under "After setup" press "Perform x grow steps" and set the number to 10'}),Object(I.jsx)("li",{children:"Wait for the axons to grow"}),Object(I.jsx)("li",{children:'Under "Visual" set the axons to be displayed as "pipes" to see the final result'})]})]})},{title:"Input file",path:"/input",component:()=>{const e=JSON.stringify(Ae,null,4);return Object(I.jsxs)(I.Fragment,{children:["In the setup phase you can provide an input file. In this example create a new file and put in the following:",Object(I.jsx)("pre",{children:e}),'and save the file as e.g. "config.json" (or click'," ",Object(I.jsx)("button",{onClick:()=>De()(e,"config.json"),children:"here"}),' to download the file). Click the "Upload" button and select the file. This should initialize a red and a green axon and a blue cell at the specified positions.',Object(I.jsx)("br",{}),Object(I.jsx)(c.b,{to:"/help/setup",children:"Click here to see a description of the input file format."})]})}},{title:"Parallel axons of equal size",path:"/parallelSameSize",component:()=>{const e=Ie();return Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)(Ce.a,{children:"The following config file will be used in this example:"}),Object(I.jsx)(w.a,{variant:"contained",onClick:()=>{Object(Te.save)(JSON.stringify(ke,null,4),"config.json")},children:"Config file"}),Object(I.jsx)(Ce.a,{children:"Using this file and setting the volume fraction target to 0.7, the following result is obtained:"}),Object(I.jsx)("img",{src:Ne,className:e.img,alt:"ellipsoids"}),Object(I.jsx)(Ce.a,{children:"Switching to the pipe display mode the result is:"}),Object(I.jsx)("img",{src:ze,className:e.img,alt:"pipes side"}),Object(I.jsx)(Ce.a,{children:"and"}),Object(I.jsx)("img",{src:Fe,className:e.img,alt:"pipes front"})]})}},{title:"Parallel axons of different sizes",path:"/parallelDifferentSize",component:()=>{const e=Je();return Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)(Ce.a,{children:"The following config file will be used in this example:"}),Object(I.jsx)(w.a,{variant:"contained",onClick:()=>{Object(Te.save)(JSON.stringify(Pe,null,4),"config.json")},children:"Config file"}),Object(I.jsx)(Ce.a,{children:"Using this file and setting the volume fraction target to 0.8, the following result is obtained:"}),Object(I.jsx)("img",{src:Le,className:e.img,alt:"ellipsoids"}),Object(I.jsx)(Ce.a,{children:"Switching to the pipe display mode the result is:"}),Object(I.jsx)("img",{src:Re,className:e.img,alt:"pipes side"}),Object(I.jsx)(Ce.a,{children:"and"}),Object(I.jsx)("img",{src:Ve,className:e.img,alt:"pipes front"})]})}}]};const He=e=>Object(I.jsx)("pre",{style:{fontFamily:"courier new",color:"crimson",backgroundColor:"#f1f1f1",padding:"2px",fontSize:"105%"},children:e.children});var Ye={title:"Help",path:"/help",component:e=>Object(I.jsx)(m.d,{children:Ye.items.map(((t,i)=>Object(I.jsx)(m.b,{path:"".concat(e.match.path).concat(t.path),component:t.component},i)))}),items:[{title:"Setup",path:"/setup",component:()=>Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)("p",{children:"The first phase is the setup phase. Here you can specify:"}),Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Voxel side length"})," - This is the side length of the voxel."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Number of axons"})," - This is the number of axons to be generated. Each axon is made up of ellipsoids (here called ellipsoids)."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Ellipsoid density of axons"})," - This is the number of ellipsoids per \xb5m along axons. A higher number results in higher precision of the model but is also more computation heavy."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Number of cells"})," - This is the number of cells to be generated. Each cell has the shape of an ellipsoid."]})]}),Object(I.jsx)("p",{children:'When you are ready click the "Initialize" button. If you want more control of exactly how the axons and cells are generated, you can instead provide a JSON file by clicking the "upload config file" button. The file can specify the following values (the unit of length is \xb5m):'}),Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"voxelSize"})," (number) - This is the side length of the voxel."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"growSpeed"})," (number) - How much the axons grow per step. 0 means no growth, 1 means that the axon will grow to 100% of its target size in 1 step."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"contractSpeed"})," (number) - How much the axons contract per step, i.e. how stiff the axons are. This number should be non-negative."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"mapFromDiameterToDeformationFactor"}),"* (object) - This map determines how much the axons' ellipsoids should deform as opposed to change position when a collision occurs. It maps from the current diameter of the ellipsoid (axon + myelin) to the deformation factor, which is a number between 0 and 1. A deformation factor of 0 means that the ellipsoid can't be deformed at all and will always be a perfect sphere. A deformation factor of 1 means that the ellipsoid will deform as much as possible rather than change the position of its center. The values defining the map will be linearly interpolated.",Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"from"})," (array of numbers) - The input values of the map, i.e. diameters. This array should be given in increasing order."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"to"})," (array of numbers) - The output values of the map, i.e. deformation factors."]})]})]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"mapFromMaxDiameterToMinDiameter"}),"* (object) - This map determines the minimum diameter an ellipsoid can have (axon + myelin) given its maximum diameter (axon + myelin). The values defining the map will be linearly interpolated.",Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"from"})," (array of numbers) - The input values of the map, i.e. maximum diameters. This array should be given in increasing order."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"to"})," (array of numbers) - The output values of the map, i.e. minimum diameters."]})]})]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"mapFromMaxDiameterToEllipsoidSeparation"}),"* (object) - This map determines the separation of ellipsoids in \xb5m on an axon given its maximum diameter (axon + myelin). The values defining the map will be linearly interpolated.",Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"from"})," (array of numbers) - The input values of the map, i.e. maximum diameters. This array should be given in increasing order."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"to"})," (array of numbers) - The output values of the map, i.e. separation of ellipsoids."]})]})]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"axons"})," (array of objects) - The axons to be generated. Initially each axon will consist of a straight chain of spheres passing through its ",Object(I.jsx)("b",{children:"position"})," vector and be aligned with its"," ",Object(I.jsx)("b",{children:"direction"})," vector.",Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"position"})," (array of 3 numbers) - When the axon is initialized it will pass through this point."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"direction"})," (array of 3 numbers) - When the axon is initialized it's direction will be aligned with this vector."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"maxDiameter"})," (number) - The maximum attainable diameter of the axon. This number is automatically divided by the ",Object(I.jsx)("b",{children:"gRatio"})," to represent the maximum attainable diameter of the axon + myelin."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"color"}),' (string) - Color code of the axon. E.g. "#ffffff" to make it white.']}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"gRatio"})," (number) - This number describes the size of the axon relative to the size of the axon + myelin. It should be between 0 and 1."]})]})]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"cells"})," (array of objects) - The cells to be generated. Each cell is defined by a position vector and a shape matrix (the identity matrix corresponds to a unit sphere). The axons will try to grow around them.",Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"position"})," (array of 3 numbers) - The center of the cell."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"shape"})," (array of 9 numbers) - Specifies the 3x3 transformation matrix used when going from a unit sphere to an ellipsoid. This ellipsoid will be the shape of the cell."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"color"}),' (string) - Color code of the cell. E.g. "#ffffff" to make it white.']})]})]})]}),Object(I.jsxs)("p",{children:["* A map object contains two arrays of numbers: ",Object(I.jsx)("b",{children:"from"})," and ",Object(I.jsx)("b",{children:"to"}),". The lengths of these arrays can be any number as long as they are the same. E.g. you can have ",Object(I.jsx)("b",{children:"from"}),"=[0,1,2,3] and ",Object(I.jsx)("b",{children:"to"}),"=[2,2,4,4]. Here both ",Object(I.jsx)("b",{children:"from"})," and ",Object(I.jsx)("b",{children:"to"})," have length 4. NB: the array lengths do not have anything to do with the number of axons or cells."]}),Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:["When a map is used the input is looked up in the ",Object(I.jsx)("b",{children:"from"})," array and the corresponding value in the"," ",Object(I.jsx)("b",{children:"to"})," array is returned. E.g. if we use the example maps from before with an input of 2, the output will be computed like this: [0,1,",Object(I.jsx)("b",{children:"2"}),",3] -> [2,2,",Object(I.jsx)("b",{children:"4"}),",4]. Hence the output will be 4."]}),Object(I.jsxs)("li",{children:["If we provide a value that doesn't exist in the ",Object(I.jsx)("b",{children:"from"})," array, linear interpolation will be used. E.g. if we use the input value 1.5, the output will be the average of the two output values: [0,",Object(I.jsx)("b",{children:"1"}),",",Object(I.jsx)("b",{children:"2"}),",3] -> [2,",Object(I.jsx)("b",{children:"2"}),",",Object(I.jsx)("b",{children:"4"}),",4]. Hence the output will be the average of 2 and 4, i.e. 3."]})]}),Object(I.jsx)(c.b,{to:"/examples/input",children:"Click here to see an example of an input file."})]})},{title:"After setup",path:"/after_setup",component:()=>Object(I.jsxs)(I.Fragment,{children:['In the "After setup" pane you can specify:',Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Grow speed"})," - This is how much the axons grow per step. A value of 0 means no growth and a value of 1 means that it should grow to 100% of its target size in 1 step. If close to 0 there will be fewer numerical errors but the algorithm will require more steps i total."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Contract speed"}),' - This is how much the axons will contract per step, i.e. how "stiff" the axons are. A value of 0 means that neighboring ellipsoids of an axon won\'t try to stay together. The maximum value is 1.']}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Minimum distance"})," - This is the minimum allowed space between axons. If set to 0 the axons can touch each other."]})]}),Object(I.jsx)("p",{children:'After specifying these values you have 3 options: 1: You can turn on automatic growth which will perform grow steps until the volume fraction has reached a specified value. 2: You can click the "Perform 1 grow step" button to perform just 1 step at a time. 3: You can click the "Perform x grow steps" button to perform a specific number of grow steps.'}),Object(I.jsx)("p",{children:"Below the two buttons the estimated volume fractions will be displayed. These fractions are estimated by counting the number of points in a lattice that fall within either an axon or a cell and dividing by the volume of the voxel."}),Object(I.jsx)("p",{children:"In the bottom of the pane you can see which part of a grow step is currently being executed. You can also see the number of completed grow steps."})]})},{title:"Visual",path:"/visual",component:()=>Object(I.jsxs)(I.Fragment,{children:['In the "Visual" pane you can specify how the generated substrate should be displayed:',Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Voxels"}),Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Hide"})," - Hide the voxels."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Show"})," - Show the voxels."]})]})]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Axons"}),Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Hide"})," - Hide the axons."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Ellipsoids"})," - Display the axons as chains of ellipsoids (this is what is used by the algorithm)."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Skeleton"})," - Display the axons as skeletons (a line strip that represents the center of the axon)."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Pipes"}),' - Display the axons as hollow "pipes" (should be used when exporting).']})]})]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Cells"}),Object(I.jsxs)("ul",{children:[Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Hide"})," - Hide the cells."]}),Object(I.jsxs)("li",{children:[Object(I.jsx)("b",{children:"Show"})," - Show the cells."]})]})]})]}),'Clicking the "Export as single file" button will export the currently displayed scene in PLY format. Clicking the "Export as multiple files" button will export all elements as individual PLY files. Clicking the "Export single element" button and then clicking on an axon or a cell will export only that element in PLY format.']})},{title:"CLI",path:"/cli",component:()=>Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)("b",{children:"CLI (command-line interface) - Installation guide"}),Object(I.jsx)("p",{children:"If you haven't already, you need to install npm. This can be done by running the following commands in a terminal:"}),Object(I.jsx)(He,{children:"curl -sL https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh -o install_nvm.sh"}),Object(I.jsx)(He,{children:"bash install_nvm.sh"}),Object(I.jsx)(He,{children:"nvm install --lts"}),Object(I.jsx)("p",{children:"Then you should be able to install the CLI by running the command:"}),Object(I.jsx)(He,{children:"npm i -g white-matter-generator"}),Object(I.jsx)("p",{children:"Now, you can run the CLI using the command:"}),Object(I.jsx)(He,{children:"white-matter-generator"})]})}]};const Ue="https://github.com/Peulicke/axon-generator-toolbox";var We=[Me,_e,Ye,{title:"Source code",path:"/source",component:()=>Object(I.jsxs)(I.Fragment,{children:["The source code can be found at ",Object(I.jsx)("a",{href:Ue,children:Ue})]})}];const Be=Object(b.a)((e=>({root:{display:"flex"},drawer:{[e.breakpoints.up("sm")]:{width:200,flexShrink:0}},drawerPaper:{width:200},content:{flexGrow:1,padding:e.spacing(3)},nested:{paddingLeft:e.spacing(4)}})));var Ge=e=>{const t=Be(),i=Object(m.g)();return Object(I.jsxs)("div",{className:t.root,children:[Object(I.jsx)("div",{className:t.drawer,children:Object(I.jsx)(d.a,{classes:{paper:t.drawerPaper},variant:"permanent",children:Object(I.jsx)(p.a,{children:We.map(((o,n)=>o.items?Object(I.jsx)(p.a,{component:"div",disablePadding:!0,subheader:Object(I.jsx)(h.a,{component:"div",children:o.title}),children:o.items.map(((n,a)=>Object(I.jsx)(x.a,{button:!0,className:t.nested,onClick:()=>i.push("".concat(o.path).concat(n.path)),selected:e.match.url==="".concat(o.path).concat(n.path),children:Object(I.jsx)(u.a,{primary:n.title})},a)))},n):Object(I.jsx)(x.a,{button:!0,onClick:()=>i.push("".concat(o.path)),selected:e.match.url==="".concat(o.path),children:Object(I.jsx)(u.a,{primary:o.title})},n)))})})}),Object(I.jsx)("div",{className:t.content,children:e.children})]})},qe=()=>Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)(l.a,{}),Object(I.jsx)(c.a,{children:Object(I.jsx)(m.b,{path:"*",component:e=>Object(I.jsx)(Ge,{...e,children:Object(I.jsxs)(m.d,{children:[We.map(((e,t)=>Object(I.jsx)(m.b,{path:"".concat(e.path),component:e.component},t))),Object(I.jsx)(m.a,{exact:!0,from:"*",to:"".concat(We[0].path)})]})})})})]});const Xe=Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function Ze(e,t){navigator.serviceWorker.register(e).then((e=>{e.onupdatefound=()=>{const i=e.installing;null!=i&&(i.onstatechange=()=>{"installed"===i.state&&(navigator.serviceWorker.controller?(console.log("New content is available and will be used when all tabs for this page are closed. See https://cra.link/PWA."),t&&t.onUpdate&&t.onUpdate(e)):(console.log("Content is cached for offline use."),t&&t.onSuccess&&t.onSuccess(e)))})}})).catch((e=>{console.error("Error during service worker registration:",e)}))}s.a.render(Object(I.jsx)(a.a.StrictMode,{children:Object(I.jsx)(qe,{})}),document.getElementById("root")),function(e){if("serviceWorker"in navigator){if(new URL("",window.location.href).origin!==window.location.origin)return;window.addEventListener("load",(()=>{const t="".concat("","/service-worker.js");Xe?(!function(e,t){fetch(e,{headers:{"Service-Worker":"script"}}).then((i=>{const o=i.headers.get("content-type");404===i.status||null!=o&&-1===o.indexOf("javascript")?navigator.serviceWorker.ready.then((e=>{e.unregister().then((()=>{window.location.reload()}))})):Ze(e,t)})).catch((()=>{console.log("No internet connection found. App is running in offline mode.")}))}(t,e),navigator.serviceWorker.ready.then((()=>{console.log("This web app is being served cache-first by a service worker. To learn more, visit https://cra.link/PWA")}))):Ze(t,e)}))}}()},77:function(e){e.exports=JSON.parse('{"voxelSize":5,"ellipsoidDensity":5,"growSpeed":0.05,"contractSpeed":0.01,"minimumDistance":0.07,"mapFromDiameterToDeformationFactor":{"from":[0,2],"to":[0,0.2]},"mapFromMaxDiameterToMinDiameter":{"from":[0,2],"to":[0,0.2]},"mapFromMaxDiameterToEllipsoidSeparation":{"from":[0,1],"to":[0.1,1]},"axons":[{"position":[-3,-1.0263626157788028,1.8293767991433718],"direction":[6,0,0],"maxDiameter":2},{"position":[3,-1.5772516312961167,2.7506864423997217],"direction":[-6,0,0],"maxDiameter":2},{"position":[3,-1.0353372023137268,1.4997612880741484],"direction":[-6,0,0],"maxDiameter":2},{"position":[3,-0.08510533174465573,-0.4652885525265189],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3.0000000000000004,0.48683705429326407,0.7114252404276629],"direction":[6,0,0],"maxDiameter":2},{"position":[3,1.5171542972116976,2.1531045063699525],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,1.1255628472952033,0.39390337522410546],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,-1.8196458507694713,-1.7742879525517767],"direction":[6,0,0],"maxDiameter":2},{"position":[2.9999999999999987,2.0288043726268303,-1.9536374698079038],"direction":[-5.999999999999998,0,0],"maxDiameter":2},{"position":[3,1.542663881448585,2.9367348100258894],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,-2.212194929141442,-2.186548947396289],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,0.5970777331595647,-1.3356560166126998],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,-0.38046253822391884,-1.0765019248070917],"direction":[6,0,0],"maxDiameter":2},{"position":[3,-0.6143738529357492,2.391106906360534],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,-0.6831739984307004,0.6127334563983395],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,1.190046077856254,-2.1515159153108314],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,-1.523746648436357,1.7202948726602076],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,1.8158829141935215,1.3738999639278386],"direction":[6,0,0],"maxDiameter":2},{"position":[3,-0.6976890063498562,2.3199407319512915],"direction":[-6,0,0],"maxDiameter":2},{"position":[3,0.5168813128838252,1.2672657294076677],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,1.141659591551429,-2.328956263640195],"direction":[6,0,0],"maxDiameter":2},{"position":[3,-1.4304059384979277,-2.744473196397257],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,1.0774345273920574,0.15095304606141013],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,-1.6241349841722021,1.2565607147280766],"direction":[6,0,0],"maxDiameter":2},{"position":[-3.0000000000000004,-0.8621728702586595,-2.409826795732005],"direction":[6,0,0],"maxDiameter":2},{"position":[3,2.8257285805245322,1.2791174473092357],"direction":[-6,0,0],"maxDiameter":2},{"position":[3,-1.534335535951152,-2.2110158819117314],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,2.774211715442766,2.297807208147543],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,-2.481061881408641,0.6143472168480324],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,-1.0843441613013396,-0.6679155794138567],"direction":[6,0,0],"maxDiameter":2},{"position":[3,0.7589439149194446,-1.1722252139831868],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,-1.2079224017106354,-0.08285433353188187],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,1.5212988041112383,0.0766320252061905],"direction":[6,0,0],"maxDiameter":2},{"position":[-3.000000000000001,-1.4879718503529067,-1.3111861604686985],"direction":[6.000000000000001,0,0],"maxDiameter":2},{"position":[2.9999999999999996,-2.6453003622987,2.1669522243382517],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,0.6168050147609092,-0.8069531195394881],"direction":[6.000000000000001,0,0],"maxDiameter":2},{"position":[2.999999999999999,-2.2603538579287896,-1.1566225360997295],"direction":[-5.999999999999999,0,0],"maxDiameter":2},{"position":[3,1.1931069176152551,-2.0272897948759594],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,0.8605705787742468,2.6783753529314214],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,-0.20596891994913902,-1.917230623820183],"direction":[6,0,0],"maxDiameter":2},{"position":[3,-0.48356883747463186,-2.7192816045116057],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3.0000000000000004,-1.953190798967373,-0.8579645737737795],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,-2.2445414257139324,-2.3251229006933674],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,0.7311482984807602,-0.22016513302777962],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,2.5742836460396257,1.2847310951989095],"direction":[6,0,0],"maxDiameter":2},{"position":[3,-0.5279522066196018,-1.8644788828466212],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,2.1590921401986156,-1.9836648865843003],"direction":[6,0,0],"maxDiameter":2},{"position":[-3,-0.543066647445841,-1.7865848891898826],"direction":[6,0,0],"maxDiameter":2},{"position":[3,-1.606921915118241,-2.788230235032461],"direction":[-6,0,0],"maxDiameter":2},{"position":[-3,-0.34795204265422575,1.3365406791308398],"direction":[6,0,0],"maxDiameter":2}],"cells":[]}')},78:function(e){e.exports=JSON.parse('{"voxelSize":5,"ellipsoidDensity":10,"growSpeed":0.05,"contractSpeed":0.01,"minimumDistance":0.07,"mapFromDiameterToDeformationFactor":{"from":[0,2],"to":[0,0.2]},"mapFromMaxDiameterToMinDiameter":{"from":[0,2],"to":[0,0.2]},"axons":[{"position":[3,-2.5184026754799,-0.07229285170103461],"direction":[-6,0,0],"maxDiameter":2.603775276619918},{"position":[3,-0.09134169160096084,0.32855213808884276],"direction":[-6,0,0],"maxDiameter":1.5029526879172006},{"position":[3,-2.6422856843710405,-0.19632282364411102],"direction":[-6,0,0],"maxDiameter":2.4089809635711665},{"position":[-3,-2.06288750425014,-0.8820850218629448],"direction":[6,0,0],"maxDiameter":1.4317701191253884},{"position":[3,-2.627904710700225,2.7943268928399223],"direction":[-6,0,0],"maxDiameter":1.5050253833297553},{"position":[3.0000000000000004,-1.7108970157255485,-0.9706475859890116],"direction":[-6,0,0],"maxDiameter":2.3392729762569617},{"position":[-3,2.1786711664436686,2.3557821065415667],"direction":[6,0,0],"maxDiameter":1.4218662299029203},{"position":[-3,1.1427770273086502,0.835431252766107],"direction":[6,0,0],"maxDiameter":1.6843150745097248},{"position":[3,2.3441193119362844,0.8496035869715381],"direction":[-6,0,0],"maxDiameter":1.1506903225191105},{"position":[3,-0.9839805372425925,-2.84587032370769],"direction":[-6,0,0],"maxDiameter":2.7299168968487244},{"position":[3,-2.1034277737309046,1.2250036543969993],"direction":[-6,0,0],"maxDiameter":1.911632165550527},{"position":[-3,1.5631801906487643,-2.4035537057636707],"direction":[6,0,0],"maxDiameter":1.6337036000894254},{"position":[-3,-1.1186274327788919,2.057993083475604],"direction":[6,0,0],"maxDiameter":1.6002471645992662},{"position":[3,-1.8178945547957408,0.628752896211914],"direction":[-6,0,0],"maxDiameter":2.876021422986912},{"position":[-3,-0.3663810147475428,-1.1960388271232527],"direction":[6,0,0],"maxDiameter":1.769478826812585},{"position":[3,0.386566288499417,2.060420722513345],"direction":[-6,0,0],"maxDiameter":2.980743625501847},{"position":[3,0.5416240059929911,-1.801366920633682],"direction":[-6,0,0],"maxDiameter":2.539858093177726},{"position":[-3,-1.4272476224599542,-2.4307671817019956],"direction":[6,0,0],"maxDiameter":2.788268284857406},{"position":[2.9999999999999996,-2.24150916632438,1.1980110760412908],"direction":[-6,0,0],"maxDiameter":2.257401067271173},{"position":[-2.9999999999999996,-1.3804455780017006,-2.5724617881751968],"direction":[6,0,0],"maxDiameter":2.571179991135133},{"position":[2.9999999999999996,1.947538174217585,-2.075560720716532],"direction":[-6,0,0],"maxDiameter":2.7642872654916952},{"position":[-3,-0.2439338760354679,-1.083957503432622],"direction":[6,0,0],"maxDiameter":2.3920800053568567},{"position":[-3,2.800132156626736,-0.9613001988468031],"direction":[6,0,0],"maxDiameter":1.5533435562971487},{"position":[3,2.399153895747954,-1.936612607872498],"direction":[-6,0,0],"maxDiameter":2.4219862267891044},{"position":[3,-1.9949284972531047,0.4676747714893512],"direction":[-6,0,0],"maxDiameter":2.3466364599095106},{"position":[2.9999999999999996,-0.18253623276501685,-2.248572728023234],"direction":[-6,0,0],"maxDiameter":2.195615171723691},{"position":[-3.0000000000000004,0.6733308508316744,2.1501545651975706],"direction":[6,0,0],"maxDiameter":1.2727951505071085},{"position":[3,-1.8023697864017367,-0.28152053147942224],"direction":[-6,0,0],"maxDiameter":1.9758889110417734},{"position":[3,-0.65196942583884,-1.0247474301596902],"direction":[-6,0,0],"maxDiameter":1.3818165451673763},{"position":[3.0000000000000004,1.6353776545286958,-2.5494319163556134],"direction":[-6,0,0],"maxDiameter":1.5058288287871764},{"position":[-3,-1.507052117571022,0.5258911570437794],"direction":[6,0,0],"maxDiameter":1.6643721538286451},{"position":[-3,2.312586567928727,-1.760925731920088],"direction":[6,0,0],"maxDiameter":2.894584985899435},{"position":[-3.0000000000000013,1.6392983349319006,-2.9190050327955412],"direction":[6.000000000000002,0,0],"maxDiameter":2.6619310037421546},{"position":[-3,-1.793844923180675,0.46303192342816457],"direction":[6,0,0],"maxDiameter":1.5679816945761993},{"position":[2.9999999999999996,1.4326849746355008,0.03015460043920859],"direction":[-6,0,0],"maxDiameter":1.1938532773569719},{"position":[3.0000000000000004,1.415245636534931,0.17739943375169487],"direction":[-6,0,0],"maxDiameter":2.2922696440664065},{"position":[3,-2.0668154956496196,-2.8639241103557476],"direction":[-6,0,0],"maxDiameter":1.4250318391166208},{"position":[-3,-1.4704966948174736,-0.6804201335910873],"direction":[6,0,0],"maxDiameter":1.3574328551177195},{"position":[3,1.7011544745865734,0.21228508151349113],"direction":[-6,0,0],"maxDiameter":2.953944258167696},{"position":[3.0000000000000004,-1.7037292992518949,-2.6475877695936325],"direction":[-6,0,0],"maxDiameter":2.8938761394939387},{"position":[-3.000000000000001,-1.0991801746957246,0.2623852196271841],"direction":[6.000000000000001,0,0],"maxDiameter":1.4579570259244234},{"position":[3,-2.8119728817934444,0.7601972364284952],"direction":[-6,0,0],"maxDiameter":1.1685769075617394},{"position":[-3,2.6537471910557127,-2.6148158616151864],"direction":[6,0,0],"maxDiameter":2.0741108316116366},{"position":[-3,0.4028647824086131,0.2760337523596541],"direction":[6,0,0],"maxDiameter":1.385938762379848},{"position":[-3,-1.1363084010994062,2.0006853013929526],"direction":[6,0,0],"maxDiameter":1.4160921177189199},{"position":[3,-2.0624548641383464,-0.16345539371979712],"direction":[-6,0,0],"maxDiameter":1.977886767775603},{"position":[-3,-2.2563666502283724,-0.4016874463020219],"direction":[6,0,0],"maxDiameter":1.3381778898531276},{"position":[2.9999999999999996,2.550431969978714,2.9698773385565183],"direction":[-6,0,0],"maxDiameter":1.9349468763836781},{"position":[3,0.4727670196021645,-1.8756457731283183],"direction":[-6,0,0],"maxDiameter":1.1936677240908184},{"position":[-3,1.2666206539009859,1.7255732453635741],"direction":[6,0,0],"maxDiameter":2.25459875109074},{"position":[3,-0.07867491316160002,-2.541065426884052],"direction":[-6,0,0],"maxDiameter":2.8977731655069414},{"position":[-3.0000000000000004,1.1278947393020258,1.625870573799312],"direction":[6,0,0],"maxDiameter":2.938399295753938},{"position":[3,2.5296260614047394,-2.9187417782963134],"direction":[-6,0,0],"maxDiameter":1.3807715548169743},{"position":[-2.9999999999999996,-1.0264383389861886,1.8171036966066119],"direction":[6,0,0],"maxDiameter":1.642537563318264},{"position":[-3,-1.1427032353123274,0.5150648676101399],"direction":[6,0,0],"maxDiameter":1.2162153431662048},{"position":[2.9999999999999996,1.6293425715943908,1.6705614330838512],"direction":[-6,0,0],"maxDiameter":1.651476721416333},{"position":[-2.9999999999999996,1.72209606019173,-0.24595750004886652],"direction":[6,0,0],"maxDiameter":2.551300875853878},{"position":[-3,1.4267838519539544,-0.939023692515061],"direction":[6,0,0],"maxDiameter":2.9624008252315024},{"position":[3,-0.7008665030287586,-2.203866070685384],"direction":[-6,0,0],"maxDiameter":1.8632719770858226},{"position":[-2.9999999999999996,1.9616725256705343,2.6347393415542233],"direction":[6,0,0],"maxDiameter":2.3589029396613794},{"position":[-3,1.2312036522938077,-2.7296331783242005],"direction":[6,0,0],"maxDiameter":1.308360401096405},{"position":[-2.9999999999999996,-2.649489595303086,1.5777282732725406],"direction":[6,0,0],"maxDiameter":2.8571519776585506},{"position":[3,0.6268521666300932,-2.3017255642173247],"direction":[-6,0,0],"maxDiameter":1.342443683895696},{"position":[2.9999999999999996,2.816093970327654,2.7946058375523815],"direction":[-6,0,0],"maxDiameter":1.4763090749353989},{"position":[3,-0.7145564152455623,-1.2928835934536793],"direction":[-6,0,0],"maxDiameter":2.7076026714337162},{"position":[-3.0000000000000004,0.6816925801473133,1.2475145868408917],"direction":[6,0,0],"maxDiameter":2.1566593889883507},{"position":[3,2.696438269329897,0.4761612702374598],"direction":[-6,0,0],"maxDiameter":2.5288926611334492},{"position":[-3,-0.21033272942080306,2.469886690778],"direction":[6,0,0],"maxDiameter":2.3052625300540392},{"position":[-3,0.5088051970017675,2.6673333074966328],"direction":[6,0,0],"maxDiameter":2.5351876520855834},{"position":[-3,-0.7035707591849252,-0.2215777713471878],"direction":[6,0,0],"maxDiameter":2.7550725421387363},{"position":[-3,0.3990973408176144,0.4767499507122199],"direction":[6,0,0],"maxDiameter":2.6896369770670097},{"position":[-3,0.7080911035550899,-2.99433398605703],"direction":[6,0,0],"maxDiameter":2.309370430622557},{"position":[-3,-2.1598524163876123,-0.9065330798760138],"direction":[6,0,0],"maxDiameter":2.821034693936466},{"position":[3.0000000000000004,2.9249879368982254,1.356391927881],"direction":[-6,0,0],"maxDiameter":2.184551824894911},{"position":[3,-1.4464022631362856,1.538382529022547],"direction":[-6,0,0],"maxDiameter":2.118591602578343},{"position":[3,-1.9538717467203375,-2.5868342234745665],"direction":[-6,0,0],"maxDiameter":2.7028507388680105},{"position":[-2.9999999999999987,2.487548124657082,1.478926106067476],"direction":[5.999999999999998,0,0],"maxDiameter":1.002394215137989},{"position":[-3,-0.22306166254416482,0.2603071401320456],"direction":[6,0,0],"maxDiameter":1.088928646849053},{"position":[-3,2.813246105297331,1.0844959867494905],"direction":[6,0,0],"maxDiameter":2.8715059698082914},{"position":[3,-1.325456697928538,-0.32149246366919915],"direction":[-6,0,0],"maxDiameter":1.7785546820332665}],"cells":[]}')}},[[121,1,2]]]);
//# sourceMappingURL=main.b42798a3.chunk.js.map